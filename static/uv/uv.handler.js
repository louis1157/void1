/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/uv.handler.js":
/*!***************************!*\
  !*** ./src/uv.handler.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * @type {import('../uv').UltravioletCtor}\r\n */\r\nconst Ultraviolet = self.Ultraviolet;\r\n\r\n/**\r\n * @type {import('../uv').UVClientCtor}\r\n */\r\nconst UVClient = self.UVClient;\r\n\r\n/**\r\n * @type {import('../uv').UVConfig}\r\n */\r\nconst __uv$config = self.__uv$config;\r\n\r\n/**\r\n * @type {import('@tomphttp/bare-client').BareManifest}\r\n */\r\nconst __uv$bareData = self.__uv$bareData;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst __uv$bareURL = self.__uv$bareURL;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nconst __uv$cookies = self.__uv$cookies;\r\n\r\nif (\r\n    typeof __uv$bareData !== 'object' ||\r\n    typeof __uv$bareURL !== 'string' ||\r\n    typeof __uv$cookies !== 'string'\r\n)\r\n    throw new TypeError('Unable to load global UV data');\r\n\r\nif (!self.__uv) __uvHook(self);\r\n\r\nself.__uvHook = __uvHook;\r\n\r\nfunction __uvHook(window) {\r\n    if ('__uv' in window && window.__uv instanceof Ultraviolet) return false;\r\n\r\n    if (window.document && !!window.window) {\r\n        window.document\r\n            .querySelectorAll('script[__uv-script]')\r\n            .forEach((node) => node.remove());\r\n    }\r\n\r\n    const worker = !window.window;\r\n    const master = '__uv';\r\n    const methodPrefix = '__uv$';\r\n    const __uv = new Ultraviolet(__uv$config);\r\n\r\n    /*if (typeof config.construct === 'function') {\r\n        config.construct(__uv, worker ? 'worker' : 'window');\r\n    }*/\r\n\r\n    const client = new UVClient(window);\r\n    const {\r\n        HTMLMediaElement,\r\n        HTMLScriptElement,\r\n        HTMLAudioElement,\r\n        HTMLVideoElement,\r\n        HTMLInputElement,\r\n        HTMLEmbedElement,\r\n        HTMLTrackElement,\r\n        HTMLAnchorElement,\r\n        HTMLIFrameElement,\r\n        HTMLAreaElement,\r\n        HTMLLinkElement,\r\n        HTMLBaseElement,\r\n        HTMLFormElement,\r\n        HTMLImageElement,\r\n        HTMLSourceElement,\r\n    } = window;\r\n\r\n    client.nativeMethods.defineProperty(window, '__uv', {\r\n        value: __uv,\r\n        enumerable: false,\r\n    });\r\n\r\n    __uv.meta.origin = location.origin;\r\n    __uv.location = client.location.emulate(\r\n        (href) => {\r\n            if (href === 'about:srcdoc') return new URL(href);\r\n            if (href.startsWith('blob:')) href = href.slice('blob:'.length);\r\n            return new URL(__uv.sourceUrl(href));\r\n        },\r\n        (href) => {\r\n            return __uv.rewriteUrl(href);\r\n        }\r\n    );\r\n\r\n    let cookieStr = __uv$cookies;\r\n\r\n    __uv.meta.url = __uv.location;\r\n    __uv.domain = __uv.meta.url.host;\r\n    __uv.blobUrls = new window.Map();\r\n    __uv.referrer = '';\r\n    __uv.cookies = [];\r\n    __uv.localStorageObj = {};\r\n    __uv.sessionStorageObj = {};\r\n\r\n    // websockets\r\n    const bareClient = new Ultraviolet.BareClient(__uv$bareURL, __uv$bareData);\r\n\r\n    if (__uv.location.href === 'about:srcdoc') {\r\n        __uv.meta = window.parent.__uv.meta;\r\n    }\r\n\r\n    if (window.EventTarget) {\r\n        __uv.addEventListener = window.EventTarget.prototype.addEventListener;\r\n        __uv.removeListener = window.EventTarget.prototype.removeListener;\r\n        __uv.dispatchEvent = window.EventTarget.prototype.dispatchEvent;\r\n    }\r\n\r\n    // Storage wrappers\r\n    client.nativeMethods.defineProperty(\r\n        client.storage.storeProto,\r\n        '__uv$storageObj',\r\n        {\r\n            get() {\r\n                if (this === client.storage.sessionStorage)\r\n                    return __uv.sessionStorageObj;\r\n                if (this === client.storage.localStorage)\r\n                    return __uv.localStorageObj;\r\n            },\r\n            enumerable: false,\r\n        }\r\n    );\r\n\r\n    if (window.localStorage) {\r\n        for (const key in window.localStorage) {\r\n            if (key.startsWith(methodPrefix + __uv.location.origin + '@')) {\r\n                __uv.localStorageObj[\r\n                    key.slice(\r\n                        (methodPrefix + __uv.location.origin + '@').length\r\n                    )\r\n                ] = window.localStorage.getItem(key);\r\n            }\r\n        }\r\n\r\n        __uv.lsWrap = client.storage.emulate(\r\n            client.storage.localStorage,\r\n            __uv.localStorageObj\r\n        );\r\n    }\r\n\r\n    if (window.sessionStorage) {\r\n        for (const key in window.sessionStorage) {\r\n            if (key.startsWith(methodPrefix + __uv.location.origin + '@')) {\r\n                __uv.sessionStorageObj[\r\n                    key.slice(\r\n                        (methodPrefix + __uv.location.origin + '@').length\r\n                    )\r\n                ] = window.sessionStorage.getItem(key);\r\n            }\r\n        }\r\n\r\n        __uv.ssWrap = client.storage.emulate(\r\n            client.storage.sessionStorage,\r\n            __uv.sessionStorageObj\r\n        );\r\n    }\r\n\r\n    let rawBase = window.document\r\n        ? client.node.baseURI.get.call(window.document)\r\n        : window.location.href;\r\n    let base = __uv.sourceUrl(rawBase);\r\n\r\n    client.nativeMethods.defineProperty(__uv.meta, 'base', {\r\n        get() {\r\n            if (!window.document) return __uv.meta.url.href;\r\n\r\n            if (client.node.baseURI.get.call(window.document) !== rawBase) {\r\n                rawBase = client.node.baseURI.get.call(window.document);\r\n                base = __uv.sourceUrl(rawBase);\r\n            }\r\n\r\n            return base;\r\n        },\r\n    });\r\n\r\n    __uv.methods = {\r\n        setSource: methodPrefix + 'setSource',\r\n        source: methodPrefix + 'source',\r\n        location: methodPrefix + 'location',\r\n        function: methodPrefix + 'function',\r\n        string: methodPrefix + 'string',\r\n        eval: methodPrefix + 'eval',\r\n        parent: methodPrefix + 'parent',\r\n        top: methodPrefix + 'top',\r\n    };\r\n\r\n    __uv.filterKeys = [\r\n        master,\r\n        __uv.methods.setSource,\r\n        __uv.methods.source,\r\n        __uv.methods.location,\r\n        __uv.methods.function,\r\n        __uv.methods.string,\r\n        __uv.methods.eval,\r\n        __uv.methods.parent,\r\n        __uv.methods.top,\r\n        methodPrefix + 'protocol',\r\n        methodPrefix + 'storageObj',\r\n        methodPrefix + 'url',\r\n        methodPrefix + 'modifiedStyle',\r\n        methodPrefix + 'config',\r\n        methodPrefix + 'dispatched',\r\n        'Ultraviolet',\r\n        '__uvHook',\r\n    ];\r\n\r\n    client.on('wrap', (target, wrapped) => {\r\n        client.nativeMethods.defineProperty(\r\n            wrapped,\r\n            'name',\r\n            client.nativeMethods.getOwnPropertyDescriptor(target, 'name')\r\n        );\r\n        client.nativeMethods.defineProperty(\r\n            wrapped,\r\n            'length',\r\n            client.nativeMethods.getOwnPropertyDescriptor(target, 'length')\r\n        );\r\n\r\n        client.nativeMethods.defineProperty(wrapped, __uv.methods.string, {\r\n            enumerable: false,\r\n            value: client.nativeMethods.fnToString.call(target),\r\n        });\r\n\r\n        client.nativeMethods.defineProperty(wrapped, __uv.methods.function, {\r\n            enumerable: false,\r\n            value: target,\r\n        });\r\n    });\r\n\r\n    client.fetch.on('request', (event) => {\r\n        event.data.input = __uv.rewriteUrl(event.data.input);\r\n    });\r\n\r\n    client.fetch.on('requestUrl', (event) => {\r\n        event.data.value = __uv.sourceUrl(event.data.value);\r\n    });\r\n\r\n    client.fetch.on('responseUrl', (event) => {\r\n        event.data.value = __uv.sourceUrl(event.data.value);\r\n    });\r\n\r\n    // XMLHttpRequest\r\n    client.xhr.on('open', (event) => {\r\n        event.data.input = __uv.rewriteUrl(event.data.input);\r\n    });\r\n\r\n    client.xhr.on('responseUrl', (event) => {\r\n        event.data.value = __uv.sourceUrl(event.data.value);\r\n    });\r\n\r\n    // Workers\r\n    client.workers.on('worker', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    client.workers.on('addModule', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    client.workers.on('importScripts', (event) => {\r\n        for (const i in event.data.scripts) {\r\n            event.data.scripts[i] = __uv.rewriteUrl(event.data.scripts[i]);\r\n        }\r\n    });\r\n\r\n    client.workers.on('postMessage', (event) => {\r\n        let to = event.data.origin;\r\n\r\n        event.data.origin = '*';\r\n        event.data.message = {\r\n            __data: event.data.message,\r\n            __origin: __uv.meta.url.origin,\r\n            __to: to,\r\n        };\r\n    });\r\n\r\n    // Navigator\r\n    client.navigator.on('sendBeacon', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    // Cookies\r\n    client.document.on('getCookie', (event) => {\r\n        event.data.value = cookieStr;\r\n    });\r\n\r\n    client.document.on('setCookie', (event) => {\r\n        __uv.cookie.db().then((db) => {\r\n            __uv.cookie.setCookies(event.data.value, db, __uv.meta);\r\n\r\n            __uv.cookie.getCookies(db).then((cookies) => {\r\n                cookieStr = __uv.cookie.serialize(cookies, __uv.meta, true);\r\n            });\r\n        });\r\n\r\n        const cookie = __uv.cookie.setCookie(event.data.value)[0];\r\n\r\n        if (!cookie.path) cookie.path = '/';\r\n        if (!cookie.domain) cookie.domain = __uv.meta.url.hostname;\r\n\r\n        if (__uv.cookie.validateCookie(cookie, __uv.meta, true)) {\r\n            if (cookieStr.length) cookieStr += '; ';\r\n            cookieStr += `${cookie.name}=${cookie.value}`;\r\n        }\r\n\r\n        event.respondWith(event.data.value);\r\n    });\r\n\r\n    // HTML\r\n    client.element.on('setInnerHTML', (event) => {\r\n        switch (event.that.tagName) {\r\n            case 'SCRIPT':\r\n                event.data.value = __uv.js.rewrite(event.data.value);\r\n                break;\r\n            case 'STYLE':\r\n                event.data.value = __uv.rewriteCSS(event.data.value);\r\n                break;\r\n            default:\r\n                event.data.value = __uv.rewriteHtml(event.data.value);\r\n        }\r\n    });\r\n\r\n    client.element.on('getInnerHTML', (event) => {\r\n        switch (event.that.tagName) {\r\n            case 'SCRIPT':\r\n                event.data.value = __uv.js.source(event.data.value);\r\n                break;\r\n            default:\r\n                event.data.value = __uv.sourceHtml(event.data.value);\r\n        }\r\n    });\r\n\r\n    client.element.on('setOuterHTML', (event) => {\r\n        event.data.value = __uv.rewriteHtml(event.data.value, {\r\n            document: event.that.tagName === 'HTML',\r\n        });\r\n    });\r\n\r\n    client.element.on('getOuterHTML', (event) => {\r\n        switch (event.that.tagName) {\r\n            case 'HEAD':\r\n                event.data.value = __uv\r\n                    .sourceHtml(\r\n                        event.data.value.replace(\r\n                            /<head(.*)>(.*)<\\/head>/s,\r\n                            '<op-head$1>$2</op-head>'\r\n                        )\r\n                    )\r\n                    .replace(\r\n                        /<op-head(.*)>(.*)<\\/op-head>/s,\r\n                        '<head$1>$2</head>'\r\n                    );\r\n                break;\r\n            case 'BODY':\r\n                event.data.value = __uv\r\n                    .sourceHtml(\r\n                        event.data.value.replace(\r\n                            /<body(.*)>(.*)<\\/body>/s,\r\n                            '<op-body$1>$2</op-body>'\r\n                        )\r\n                    )\r\n                    .replace(\r\n                        /<op-body(.*)>(.*)<\\/op-body>/s,\r\n                        '<body$1>$2</body>'\r\n                    );\r\n                break;\r\n            default:\r\n                event.data.value = __uv.sourceHtml(event.data.value, {\r\n                    document: event.that.tagName === 'HTML',\r\n                });\r\n                break;\r\n        }\r\n\r\n        //event.data.value = __uv.sourceHtml(event.data.value, { document: event.that.tagName === 'HTML' });\r\n    });\r\n\r\n    client.document.on('write', (event) => {\r\n        if (!event.data.html.length) return false;\r\n        event.data.html = [__uv.rewriteHtml(event.data.html.join(''))];\r\n    });\r\n\r\n    client.document.on('writeln', (event) => {\r\n        if (!event.data.html.length) return false;\r\n        event.data.html = [__uv.rewriteHtml(event.data.html.join(''))];\r\n    });\r\n\r\n    client.element.on('insertAdjacentHTML', (event) => {\r\n        event.data.html = __uv.rewriteHtml(event.data.html);\r\n    });\r\n\r\n    // EventSource\r\n\r\n    client.eventSource.on('construct', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    client.eventSource.on('url', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    // IDB\r\n    client.idb.on('idbFactoryOpen', (event) => {\r\n        // Don't modify the Ultraviolet cookie database\r\n        if (event.data.name === '__op') return;\r\n        event.data.name = `${__uv.meta.url.origin}@${event.data.name}`;\r\n    });\r\n\r\n    client.idb.on('idbFactoryName', (event) => {\r\n        event.data.value = event.data.value.slice(\r\n            __uv.meta.url.origin.length + 1 /*the @*/\r\n        );\r\n    });\r\n\r\n    // History\r\n    client.history.on('replaceState', (event) => {\r\n        if (event.data.url)\r\n            event.data.url = __uv.rewriteUrl(\r\n                event.data.url,\r\n                '__uv' in event.that ? event.that.__uv.meta : __uv.meta\r\n            );\r\n    });\r\n    client.history.on('pushState', (event) => {\r\n        if (event.data.url)\r\n            event.data.url = __uv.rewriteUrl(\r\n                event.data.url,\r\n                '__uv' in event.that ? event.that.__uv.meta : __uv.meta\r\n            );\r\n    });\r\n\r\n    // Element get set attribute methods\r\n    client.element.on('getAttribute', (event) => {\r\n        if (\r\n            client.element.hasAttribute.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name\r\n            )\r\n        ) {\r\n            event.respondWith(\r\n                event.target.call(\r\n                    event.that,\r\n                    __uv.attributePrefix + '-attr-' + event.data.name\r\n                )\r\n            );\r\n        }\r\n    });\r\n\r\n    // Message\r\n    client.message.on('postMessage', (event) => {\r\n        let to = event.data.origin;\r\n        let call = __uv.call;\r\n\r\n        if (event.that) {\r\n            call = event.that.__uv$source.call;\r\n        }\r\n\r\n        event.data.origin = '*';\r\n        event.data.message = {\r\n            __data: event.data.message,\r\n            __origin: (event.that || event.target).__uv$source.location.origin,\r\n            __to: to,\r\n        };\r\n\r\n        event.respondWith(\r\n            worker\r\n                ? call(\r\n                      event.target,\r\n                      [event.data.message, event.data.transfer],\r\n                      event.that\r\n                  )\r\n                : call(\r\n                      event.target,\r\n                      [\r\n                          event.data.message,\r\n                          event.data.origin,\r\n                          event.data.transfer,\r\n                      ],\r\n                      event.that\r\n                  )\r\n        );\r\n    });\r\n\r\n    client.message.on('data', (event) => {\r\n        const { value: data } = event.data;\r\n        if (\r\n            typeof data === 'object' &&\r\n            '__data' in data &&\r\n            '__origin' in data\r\n        ) {\r\n            event.respondWith(data.__data);\r\n        }\r\n    });\r\n\r\n    client.message.on('origin', (event) => {\r\n        const data = client.message.messageData.get.call(event.that);\r\n        if (typeof data === 'object' && data.__data && data.__origin) {\r\n            event.respondWith(data.__origin);\r\n        }\r\n    });\r\n\r\n    client.overrideDescriptor(window, 'origin', {\r\n        get: () => {\r\n            return __uv.location.origin;\r\n        },\r\n    });\r\n\r\n    client.node.on('baseURI', (event) => {\r\n        if (event.data.value.startsWith(window.location.origin))\r\n            event.data.value = __uv.sourceUrl(event.data.value);\r\n    });\r\n\r\n    client.element.on('setAttribute', (event) => {\r\n        if (\r\n            event.that instanceof HTMLMediaElement &&\r\n            event.data.name === 'src' &&\r\n            event.data.value.startsWith('blob:')\r\n        ) {\r\n            event.target.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.blobUrls.get(event.data.value);\r\n            return;\r\n        }\r\n\r\n        if (__uv.attrs.isUrl(event.data.name)) {\r\n            event.target.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteUrl(event.data.value);\r\n        }\r\n\r\n        if (__uv.attrs.isStyle(event.data.name)) {\r\n            event.target.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteCSS(event.data.value, {\r\n                context: 'declarationList',\r\n            });\r\n        }\r\n\r\n        if (__uv.attrs.isHtml(event.data.name)) {\r\n            event.target.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteHtml(event.data.value, {\r\n                ...__uv.meta,\r\n                document: true,\r\n                injectHead: __uv.createHtmlInject(\r\n                    __uv.handlerScript,\r\n                    __uv.bundleScript,\r\n                    __uv.clientScript,\r\n                    __uv.configScript,\r\n                    __uv$bareURL,\r\n                    __uv$bareData,\r\n                    cookieStr,\r\n                    window.location.href\r\n                ),\r\n            });\r\n        }\r\n\r\n        if (__uv.attrs.isSrcset(event.data.name)) {\r\n            event.target.call(\r\n                event.that,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.html.wrapSrcset(\r\n                event.data.value.toString()\r\n            );\r\n        }\r\n\r\n        if (__uv.attrs.isForbidden(event.data.name)) {\r\n            event.data.name = __uv.attributePrefix + '-attr-' + event.data.name;\r\n        }\r\n    });\r\n\r\n    client.element.on('audio', (event) => {\r\n        event.data.url = __uv.rewriteUrl(event.data.url);\r\n    });\r\n\r\n    // Element Property Attributes\r\n    client.element.hookProperty(\r\n        [HTMLAnchorElement, HTMLAreaElement, HTMLLinkElement, HTMLBaseElement],\r\n        'href',\r\n        {\r\n            get: (target, that) => {\r\n                return __uv.sourceUrl(target.call(that));\r\n            },\r\n            set: (target, that, [val]) => {\r\n                client.element.setAttribute.call(\r\n                    that,\r\n                    __uv.attributePrefix + '-attr-href',\r\n                    val\r\n                );\r\n                target.call(that, __uv.rewriteUrl(val));\r\n            },\r\n        }\r\n    );\r\n\r\n    client.element.hookProperty(\r\n        [\r\n            HTMLScriptElement,\r\n            HTMLAudioElement,\r\n            HTMLVideoElement,\r\n            HTMLMediaElement,\r\n            HTMLImageElement,\r\n            HTMLInputElement,\r\n            HTMLEmbedElement,\r\n            HTMLIFrameElement,\r\n            HTMLTrackElement,\r\n            HTMLSourceElement,\r\n        ],\r\n        'src',\r\n        {\r\n            get: (target, that) => {\r\n                return __uv.sourceUrl(target.call(that));\r\n            },\r\n            set: (target, that, [val]) => {\r\n                if (\r\n                    new String(val).toString().trim().startsWith('blob:') &&\r\n                    that instanceof HTMLMediaElement\r\n                ) {\r\n                    client.element.setAttribute.call(\r\n                        that,\r\n                        __uv.attributePrefix + '-attr-src',\r\n                        val\r\n                    );\r\n                    return target.call(that, __uv.blobUrls.get(val) || val);\r\n                }\r\n\r\n                client.element.setAttribute.call(\r\n                    that,\r\n                    __uv.attributePrefix + '-attr-src',\r\n                    val\r\n                );\r\n                target.call(that, __uv.rewriteUrl(val));\r\n            },\r\n        }\r\n    );\r\n\r\n    client.element.hookProperty([HTMLFormElement], 'action', {\r\n        get: (target, that) => {\r\n            return __uv.sourceUrl(target.call(that));\r\n        },\r\n        set: (target, that, [val]) => {\r\n            client.element.setAttribute.call(\r\n                that,\r\n                __uv.attributePrefix + '-attr-action',\r\n                val\r\n            );\r\n            target.call(that, __uv.rewriteUrl(val));\r\n        },\r\n    });\r\n\r\n    client.element.hookProperty([HTMLImageElement], 'srcset', {\r\n        get: (target, that) => {\r\n            return (\r\n                client.element.getAttribute.call(\r\n                    that,\r\n                    __uv.attributePrefix + '-attr-srcset'\r\n                ) || target.call(that)\r\n            );\r\n        },\r\n        set: (target, that, [val]) => {\r\n            client.element.setAttribute.call(\r\n                that,\r\n                __uv.attributePrefix + '-attr-srcset',\r\n                val\r\n            );\r\n            target.call(that, __uv.html.wrapSrcset(val.toString()));\r\n        },\r\n    });\r\n\r\n    client.element.hookProperty(HTMLScriptElement, 'integrity', {\r\n        get: (target, that) => {\r\n            return client.element.getAttribute.call(\r\n                that,\r\n                __uv.attributePrefix + '-attr-integrity'\r\n            );\r\n        },\r\n        set: (target, that, [val]) => {\r\n            client.element.setAttribute.call(\r\n                that,\r\n                __uv.attributePrefix + '-attr-integrity',\r\n                val\r\n            );\r\n        },\r\n    });\r\n\r\n    client.element.hookProperty(HTMLIFrameElement, 'sandbox', {\r\n        get: (target, that) => {\r\n            return (\r\n                client.element.getAttribute.call(\r\n                    that,\r\n                    __uv.attributePrefix + '-attr-sandbox'\r\n                ) || target.call(that)\r\n            );\r\n        },\r\n        set: (target, that, [val]) => {\r\n            client.element.setAttribute.call(\r\n                that,\r\n                __uv.attributePrefix + '-attr-sandbox',\r\n                val\r\n            );\r\n        },\r\n    });\r\n\r\n    // HTMLIFrameElement may not be defined (workers)\r\n    const contentWindowGet =\r\n        HTMLIFrameElement &&\r\n        Object.getOwnPropertyDescriptor(\r\n            HTMLIFrameElement.prototype,\r\n            'contentWindow'\r\n        ).get;\r\n\r\n    function uvInject(that) {\r\n        const win = contentWindowGet.call(that);\r\n\r\n        if (!win.__uv)\r\n            try {\r\n                __uvHook(win);\r\n            } catch (e) {\r\n                console.error('catastrophic failure');\r\n                console.error(e);\r\n            }\r\n    }\r\n\r\n    client.element.hookProperty(HTMLIFrameElement, 'contentWindow', {\r\n        get: (target, that) => {\r\n            uvInject(that);\r\n            return target.call(that);\r\n        },\r\n    });\r\n\r\n    client.element.hookProperty(HTMLIFrameElement, 'contentDocument', {\r\n        get: (target, that) => {\r\n            uvInject(that);\r\n            return target.call(that);\r\n        },\r\n    });\r\n\r\n    client.element.hookProperty(HTMLIFrameElement, 'srcdoc', {\r\n        get: (target, that) => {\r\n            return (\r\n                client.element.getAttribute.call(\r\n                    that,\r\n                    __uv.attributePrefix + '-attr-srcdoc'\r\n                ) || target.call(that)\r\n            );\r\n        },\r\n        set: (target, that, [val]) => {\r\n            target.call(\r\n                that,\r\n                __uv.rewriteHtml(val, {\r\n                    document: true,\r\n                    injectHead: __uv.createHtmlInject(\r\n                        __uv.handlerScript,\r\n                        __uv.bundleScript,\r\n                        __uv.clientScript,\r\n                        __uv.configScript,\r\n                        __uv$bareURL,\r\n                        __uv$bareData,\r\n                        cookieStr,\r\n                        window.location.href\r\n                    ),\r\n                })\r\n            );\r\n        },\r\n    });\r\n\r\n    client.node.on('getTextContent', (event) => {\r\n        if (event.that.tagName === 'SCRIPT') {\r\n            event.data.value = __uv.js.source(event.data.value);\r\n        }\r\n    });\r\n\r\n    client.node.on('setTextContent', (event) => {\r\n        if (event.that.tagName === 'SCRIPT') {\r\n            event.data.value = __uv.js.rewrite(event.data.value);\r\n        }\r\n    });\r\n\r\n    // Until proper rewriting is implemented for service workers.\r\n    // Not sure atm how to implement it with the already built in service worker\r\n    if ('serviceWorker' in window.navigator) {\r\n        delete window.Navigator.prototype.serviceWorker;\r\n    }\r\n\r\n    // Document\r\n    client.document.on('getDomain', (event) => {\r\n        event.data.value = __uv.domain;\r\n    });\r\n    client.document.on('setDomain', (event) => {\r\n        if (\r\n            !event.data.value\r\n                .toString()\r\n                .endsWith(__uv.meta.url.hostname.split('.').slice(-2).join('.'))\r\n        )\r\n            return event.respondWith('');\r\n        event.respondWith((__uv.domain = event.data.value));\r\n    });\r\n\r\n    client.document.on('url', (event) => {\r\n        event.data.value = __uv.location.href;\r\n    });\r\n\r\n    client.document.on('documentURI', (event) => {\r\n        event.data.value = __uv.location.href;\r\n    });\r\n\r\n    client.document.on('referrer', (event) => {\r\n        event.data.value = __uv.referrer || __uv.sourceUrl(event.data.value);\r\n    });\r\n\r\n    client.document.on('parseFromString', (event) => {\r\n        if (event.data.type !== 'text/html') return false;\r\n        event.data.string = __uv.rewriteHtml(event.data.string, {\r\n            ...__uv.meta,\r\n            document: true,\r\n        });\r\n    });\r\n\r\n    // Attribute (node.attributes)\r\n    client.attribute.on('getValue', (event) => {\r\n        if (\r\n            client.element.hasAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name\r\n            )\r\n        ) {\r\n            event.data.value = client.element.getAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name\r\n            );\r\n        }\r\n    });\r\n\r\n    client.attribute.on('setValue', (event) => {\r\n        if (__uv.attrs.isUrl(event.data.name)) {\r\n            client.element.setAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteUrl(event.data.value);\r\n        }\r\n\r\n        if (__uv.attrs.isStyle(event.data.name)) {\r\n            client.element.setAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteCSS(event.data.value, {\r\n                context: 'declarationList',\r\n            });\r\n        }\r\n\r\n        if (__uv.attrs.isHtml(event.data.name)) {\r\n            client.element.setAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.rewriteHtml(event.data.value, {\r\n                ...__uv.meta,\r\n                document: true,\r\n                injectHead: __uv.createHtmlInject(\r\n                    __uv.handlerScript,\r\n                    __uv.bundleScript,\r\n                    __uv.clientScript,\r\n                    __uv.configScript,\r\n                    __uv$bareURL,\r\n                    __uv$bareData,\r\n                    cookieStr,\r\n                    window.location.href\r\n                ),\r\n            });\r\n        }\r\n\r\n        if (__uv.attrs.isSrcset(event.data.name)) {\r\n            client.element.setAttribute.call(\r\n                event.that.ownerElement,\r\n                __uv.attributePrefix + '-attr-' + event.data.name,\r\n                event.data.value\r\n            );\r\n            event.data.value = __uv.html.wrapSrcset(\r\n                event.data.value.toString()\r\n            );\r\n        }\r\n    });\r\n\r\n    // URL\r\n    client.url.on('createObjectURL', (event) => {\r\n        let url = event.target.call(event.that, event.data.object);\r\n        if (url.startsWith('blob:' + location.origin)) {\r\n            let newUrl =\r\n                'blob:' +\r\n                (__uv.meta.url.href !== 'about:blank'\r\n                    ? __uv.meta.url.origin\r\n                    : window.parent.__uv.meta.url.origin) +\r\n                url.slice('blob:'.length + location.origin.length);\r\n            __uv.blobUrls.set(newUrl, url);\r\n            event.respondWith(newUrl);\r\n        } else {\r\n            event.respondWith(url);\r\n        }\r\n    });\r\n\r\n    client.url.on('revokeObjectURL', (event) => {\r\n        if (__uv.blobUrls.has(event.data.url)) {\r\n            const old = event.data.url;\r\n            event.data.url = __uv.blobUrls.get(event.data.url);\r\n            __uv.blobUrls.delete(old);\r\n        }\r\n    });\r\n\r\n    client.storage.on('get', (event) => {\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('set', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            event.that.__uv$storageObj[event.data.name] = event.data.value;\r\n        }\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('delete', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            delete event.that.__uv$storageObj[event.data.name];\r\n        }\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('getItem', (event) => {\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('setItem', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            event.that.__uv$storageObj[event.data.name] = event.data.value;\r\n        }\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('removeItem', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            delete event.that.__uv$storageObj[event.data.name];\r\n        }\r\n        event.data.name =\r\n            methodPrefix + __uv.meta.url.origin + '@' + event.data.name;\r\n    });\r\n\r\n    client.storage.on('clear', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            for (const key of client.nativeMethods.keys.call(\r\n                null,\r\n                event.that.__uv$storageObj\r\n            )) {\r\n                delete event.that.__uv$storageObj[key];\r\n                client.storage.removeItem.call(\r\n                    event.that,\r\n                    methodPrefix + __uv.meta.url.origin + '@' + key\r\n                );\r\n                event.respondWith();\r\n            }\r\n        }\r\n    });\r\n\r\n    client.storage.on('length', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            event.respondWith(\r\n                client.nativeMethods.keys.call(null, event.that.__uv$storageObj)\r\n                    .length\r\n            );\r\n        }\r\n    });\r\n\r\n    client.storage.on('key', (event) => {\r\n        if (event.that.__uv$storageObj) {\r\n            event.respondWith(\r\n                client.nativeMethods.keys.call(\r\n                    null,\r\n                    event.that.__uv$storageObj\r\n                )[event.data.index] || null\r\n            );\r\n        }\r\n    });\r\n\r\n    function eventTarget(target, event) {\r\n        const property = `on${event}`;\r\n        const listeners = new WeakMap();\r\n\r\n        Reflect.defineProperty(target, property, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get() {\r\n                if (listeners.has(this)) {\r\n                    return listeners.get(this);\r\n                } else {\r\n                    return null;\r\n                }\r\n            },\r\n            set(value) {\r\n                if (typeof value == 'function') {\r\n                    if (listeners.has(this)) {\r\n                        this.removeEventListener(event, listeners.get(this));\r\n                    }\r\n\r\n                    listeners.set(this, value);\r\n                    this.addEventListener(event, value);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    const wsProtocols = ['ws:', 'wss:'];\r\n\r\n    class MockWebSocket extends EventTarget {\r\n        /**\r\n         * @type {import(\"@tomphttp/bare-client\").BareWebSocket}\r\n         */\r\n        #socket;\r\n        #ready;\r\n        #binaryType = 'blob';\r\n        #protocol = '';\r\n        #extensions = '';\r\n        #url = '';\r\n        /**\r\n         *\r\n         * @param {URL} remote\r\n         * @param {any} protocol\r\n         */\r\n        async #open(url, protocol) {\r\n            const requestHeaders = {};\r\n            Reflect.setPrototypeOf(requestHeaders, null);\r\n\r\n            requestHeaders['Origin'] = __uv.meta.url.origin;\r\n            requestHeaders['User-Agent'] = navigator.userAgent;\r\n\r\n            if (cookieStr !== '')\r\n                requestHeaders['Cookie'] = cookieStr.toString();\r\n\r\n            this.#socket = await bareClient.createWebSocket(\r\n                url,\r\n                requestHeaders,\r\n                protocol\r\n            );\r\n\r\n            this.#socket.binaryType = this.#binaryType;\r\n\r\n            this.#socket.addEventListener('message', (event) => {\r\n                this.dispatchEvent(new MessageEvent('message', event));\r\n            });\r\n\r\n            this.#socket.addEventListener('open', async (event) => {\r\n                this.dispatchEvent(new Event('open', event));\r\n            });\r\n\r\n            this.#socket.addEventListener('error', (event) => {\r\n                this.dispatchEvent(new ErrorEvent('error', event));\r\n            });\r\n\r\n            this.#socket.addEventListener('close', (event) => {\r\n                this.dispatchEvent(new Event('close', event));\r\n            });\r\n\r\n            const meta = await this.#socket.meta;\r\n\r\n            if (meta.headers.has('sec-websocket-protocol'))\r\n                this.#protocol = meta.headers.get('sec-websocket-protocol');\r\n\r\n            if (meta.headers.has('sec-websocket-extensions'))\r\n                this.#extensions = meta.headers.get('sec-websocket-extensions');\r\n\r\n            let setCookie = meta.rawHeaders['set-cookie'] || [];\r\n            if (!Array.isArray(setCookie)) setCookie = [];\r\n            // trip the hook\r\n            for (const cookie of setCookie) document.cookie = cookie;\r\n        }\r\n        get url() {\r\n            return this.#url;\r\n        }\r\n        constructor(...args) {\r\n            super();\r\n\r\n            if (!args.length)\r\n                throw new DOMException(\r\n                    `Failed to construct 'WebSocket': 1 argument required, but only 0 present.`\r\n                );\r\n\r\n            const [url, protocol] = args;\r\n\r\n            let parsed;\r\n\r\n            try {\r\n                parsed = new URL(url);\r\n            } catch (err) {\r\n                throw new DOMException(\r\n                    `Faiiled to construct 'WebSocket': The URL '${url}' is invalid.`\r\n                );\r\n            }\r\n\r\n            if (!wsProtocols.includes(parsed.protocol)) {\r\n                throw new DOMException(\r\n                    `Failed to construct 'WebSocket': The URL's scheme must be either 'ws' or 'wss'. '${parsed.protocol}' is not allowed.`\r\n                );\r\n            }\r\n\r\n            this.#ready = this.#open(parsed, protocol);\r\n        }\r\n        get protocol() {\r\n            return this.#protocol;\r\n        }\r\n        get extensions() {\r\n            return this.#extensions;\r\n        }\r\n        get readyState() {\r\n            if (this.#socket) {\r\n                return this.#socket.readyState;\r\n            } else {\r\n                return MockWebSocket.CONNECTING;\r\n            }\r\n        }\r\n        get binaryType() {\r\n            return this.#binaryType;\r\n        }\r\n        set binaryType(value) {\r\n            this.#binaryType = value;\r\n\r\n            if (this.#socket) {\r\n                this.#socket.binaryType = value;\r\n            }\r\n        }\r\n        send(data) {\r\n            if (!this.#socket) {\r\n                throw new DOMException(\r\n                    `Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.`\r\n                );\r\n            }\r\n            this.#socket.send(data);\r\n        }\r\n        close(code, reason) {\r\n            if (typeof code !== 'undefined') {\r\n                if (typeof code !== 'number') {\r\n                    code = 0;\r\n                }\r\n\r\n                if (code !== 1000 && (code < 3000 || code > 4999)) {\r\n                    throw new DOMException(\r\n                        `Failed to execute 'close' on 'WebSocket': The code must be either 1000, or between 3000 and 4999. ${code} is neither.`\r\n                    );\r\n                }\r\n            }\r\n\r\n            this.#ready.then(() => this.#socket.close(code, reason));\r\n        }\r\n    }\r\n\r\n    eventTarget(MockWebSocket.prototype, 'close');\r\n    eventTarget(MockWebSocket.prototype, 'open');\r\n    eventTarget(MockWebSocket.prototype, 'message');\r\n    eventTarget(MockWebSocket.prototype, 'error');\r\n\r\n    for (const hook of [\r\n        'url',\r\n        'protocol',\r\n        'extensions',\r\n        'readyState',\r\n        'binaryType',\r\n    ]) {\r\n        const officialDesc = Object.getOwnPropertyDescriptor(\r\n            window.WebSocket.prototype,\r\n            hook\r\n        );\r\n        const customDesc = Object.getOwnPropertyDescriptor(\r\n            MockWebSocket.prototype,\r\n            hook\r\n        );\r\n\r\n        if (customDesc?.get && officialDesc?.get)\r\n            client.emit('wrap', customDesc.get, officialDesc.get);\r\n\r\n        if (customDesc?.set && officialDesc?.set)\r\n            client.emit('wrap', customDesc.get, officialDesc.get);\r\n    }\r\n\r\n    client.emit(\r\n        'wrap',\r\n        window.WebSocket.prototype.send,\r\n        MockWebSocket.prototype.send\r\n    );\r\n    client.emit(\r\n        'wrap',\r\n        window.WebSocket.prototype.close,\r\n        MockWebSocket.prototype.close\r\n    );\r\n\r\n    client.override(\r\n        window,\r\n        'WebSocket',\r\n        (target, that, args) => new MockWebSocket(...args),\r\n        true\r\n    );\r\n\r\n    MockWebSocket.prototype.constructor = window.WebSocket;\r\n\r\n    client.function.on('function', (event) => {\r\n        event.data.script = __uv.rewriteJS(event.data.script);\r\n    });\r\n\r\n    client.function.on('toString', (event) => {\r\n        if (__uv.methods.string in event.that)\r\n            event.respondWith(event.that[__uv.methods.string]);\r\n    });\r\n\r\n    client.object.on('getOwnPropertyNames', (event) => {\r\n        event.data.names = event.data.names.filter(\r\n            (element) => !__uv.filterKeys.includes(element)\r\n        );\r\n    });\r\n\r\n    client.object.on('getOwnPropertyDescriptors', (event) => {\r\n        for (const forbidden of __uv.filterKeys) {\r\n            delete event.data.descriptors[forbidden];\r\n        }\r\n    });\r\n\r\n    client.style.on('setProperty', (event) => {\r\n        if (client.style.dashedUrlProps.includes(event.data.property)) {\r\n            event.data.value = __uv.rewriteCSS(event.data.value, {\r\n                context: 'value',\r\n                ...__uv.meta,\r\n            });\r\n        }\r\n    });\r\n\r\n    client.style.on('getPropertyValue', (event) => {\r\n        if (client.style.dashedUrlProps.includes(event.data.property)) {\r\n            event.respondWith(\r\n                __uv.sourceCSS(\r\n                    event.target.call(event.that, event.data.property),\r\n                    {\r\n                        context: 'value',\r\n                        ...__uv.meta,\r\n                    }\r\n                )\r\n            );\r\n        }\r\n    });\r\n\r\n    if ('CSS2Properties' in window) {\r\n        for (const key of client.style.urlProps) {\r\n            client.overrideDescriptor(window.CSS2Properties.prototype, key, {\r\n                get: (target, that) => {\r\n                    return __uv.sourceCSS(target.call(that), {\r\n                        context: 'value',\r\n                        ...__uv.meta,\r\n                    });\r\n                },\r\n                set: (target, that, val) => {\r\n                    target.call(\r\n                        that,\r\n                        __uv.rewriteCSS(val, {\r\n                            context: 'value',\r\n                            ...__uv.meta,\r\n                        })\r\n                    );\r\n                },\r\n            });\r\n        }\r\n    } else if ('HTMLElement' in window) {\r\n        client.overrideDescriptor(window.HTMLElement.prototype, 'style', {\r\n            get: (target, that) => {\r\n                const value = target.call(that);\r\n                if (!value[methodPrefix + 'modifiedStyle']) {\r\n                    for (const key of client.style.urlProps) {\r\n                        client.nativeMethods.defineProperty(value, key, {\r\n                            enumerable: true,\r\n                            configurable: true,\r\n                            get() {\r\n                                const value =\r\n                                    client.style.getPropertyValue.call(\r\n                                        this,\r\n                                        key\r\n                                    ) || '';\r\n                                return __uv.sourceCSS(value, {\r\n                                    context: 'value',\r\n                                    ...__uv.meta,\r\n                                });\r\n                            },\r\n                            set(val) {\r\n                                client.style.setProperty.call(\r\n                                    this,\r\n                                    client.style.propToDashed[key] || key,\r\n                                    __uv.rewriteCSS(val, {\r\n                                        context: 'value',\r\n                                        ...__uv.meta,\r\n                                    })\r\n                                );\r\n                            },\r\n                        });\r\n                        client.nativeMethods.defineProperty(\r\n                            value,\r\n                            methodPrefix + 'modifiedStyle',\r\n                            {\r\n                                enumerable: false,\r\n                                value: true,\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                return value;\r\n            },\r\n        });\r\n    }\r\n\r\n    client.style.on('setCssText', (event) => {\r\n        event.data.value = __uv.rewriteCSS(event.data.value, {\r\n            context: 'declarationList',\r\n            ...__uv.meta,\r\n        });\r\n    });\r\n\r\n    client.style.on('getCssText', (event) => {\r\n        event.data.value = __uv.sourceCSS(event.data.value, {\r\n            context: 'declarationList',\r\n            ...__uv.meta,\r\n        });\r\n    });\r\n\r\n    // Proper hash emulation.\r\n    __uv.addEventListener.call(window, 'hashchange', (event) => {\r\n        if (event.__uv$dispatched) return false;\r\n        event.stopImmediatePropagation();\r\n        const hash = window.location.hash;\r\n        client.history.replaceState.call(window.history, '', '', event.oldURL);\r\n        __uv.location.hash = hash;\r\n    });\r\n\r\n    client.location.on('hashchange', (oldUrl, newUrl, ctx) => {\r\n        if (ctx.HashChangeEvent && client.history.replaceState) {\r\n            client.history.replaceState.call(\r\n                window.history,\r\n                '',\r\n                '',\r\n                __uv.rewriteUrl(newUrl)\r\n            );\r\n\r\n            const event = new ctx.HashChangeEvent('hashchange', {\r\n                newURL: newUrl,\r\n                oldURL: oldUrl,\r\n            });\r\n\r\n            client.nativeMethods.defineProperty(\r\n                event,\r\n                methodPrefix + 'dispatched',\r\n                {\r\n                    value: true,\r\n                    enumerable: false,\r\n                }\r\n            );\r\n\r\n            __uv.dispatchEvent.call(window, event);\r\n        }\r\n    });\r\n\r\n    // Hooking functions & descriptors\r\n    client.fetch.overrideRequest();\r\n    client.fetch.overrideUrl();\r\n    client.xhr.overrideOpen();\r\n    client.xhr.overrideResponseUrl();\r\n    client.element.overrideHtml();\r\n    client.element.overrideAttribute();\r\n    client.element.overrideInsertAdjacentHTML();\r\n    client.element.overrideAudio();\r\n    // client.element.overrideQuerySelector();\r\n    client.node.overrideBaseURI();\r\n    client.node.overrideTextContent();\r\n    client.attribute.overrideNameValue();\r\n    client.document.overrideDomain();\r\n    client.document.overrideURL();\r\n    client.document.overrideDocumentURI();\r\n    client.document.overrideWrite();\r\n    client.document.overrideReferrer();\r\n    client.document.overrideParseFromString();\r\n    client.storage.overrideMethods();\r\n    client.storage.overrideLength();\r\n    //client.document.overrideQuerySelector();\r\n    client.object.overrideGetPropertyNames();\r\n    client.object.overrideGetOwnPropertyDescriptors();\r\n    client.idb.overrideName();\r\n    client.idb.overrideOpen();\r\n    client.history.overridePushState();\r\n    client.history.overrideReplaceState();\r\n    client.eventSource.overrideConstruct();\r\n    client.eventSource.overrideUrl();\r\n    client.url.overrideObjectURL();\r\n    client.document.overrideCookie();\r\n    client.message.overridePostMessage();\r\n    client.message.overrideMessageOrigin();\r\n    client.message.overrideMessageData();\r\n    client.workers.overrideWorker();\r\n    client.workers.overrideAddModule();\r\n    client.workers.overrideImportScripts();\r\n    client.workers.overridePostMessage();\r\n    client.style.overrideSetGetProperty();\r\n    client.style.overrideCssText();\r\n    client.navigator.overrideSendBeacon();\r\n    client.function.overrideFunction();\r\n    client.function.overrideToString();\r\n    client.location.overrideWorkerLocation((href) => {\r\n        return new URL(__uv.sourceUrl(href));\r\n    });\r\n\r\n    client.overrideDescriptor(window, 'localStorage', {\r\n        get: (target, that) => {\r\n            return (that || window).__uv.lsWrap;\r\n        },\r\n    });\r\n    client.overrideDescriptor(window, 'sessionStorage', {\r\n        get: (target, that) => {\r\n            return (that || window).__uv.ssWrap;\r\n        },\r\n    });\r\n\r\n    client.override(window, 'open', (target, that, args) => {\r\n        if (!args.length) return target.apply(that, args);\r\n        let [url] = args;\r\n\r\n        url = __uv.rewriteUrl(url);\r\n\r\n        return target.call(that, url);\r\n    });\r\n\r\n    __uv.$wrap = function (name) {\r\n        if (name === 'location') return __uv.methods.location;\r\n        if (name === 'eval') return __uv.methods.eval;\r\n        return name;\r\n    };\r\n\r\n    __uv.$get = function (that) {\r\n        if (that === window.location) return __uv.location;\r\n        if (that === window.eval) return __uv.eval;\r\n        if (that === window.parent) {\r\n            return window.__uv$parent;\r\n        }\r\n        if (that === window.top) {\r\n            return window.__uv$top;\r\n        }\r\n        return that;\r\n    };\r\n\r\n    __uv.eval = client.wrap(window, 'eval', (target, that, args) => {\r\n        if (!args.length || typeof args[0] !== 'string')\r\n            return target.apply(that, args);\r\n        let [script] = args;\r\n\r\n        script = __uv.rewriteJS(script);\r\n        return target.call(that, script);\r\n    });\r\n\r\n    __uv.call = function (target, args, that) {\r\n        return that ? target.apply(that, args) : target(...args);\r\n    };\r\n\r\n    __uv.call$ = function (obj, prop, args = []) {\r\n        return obj[prop].apply(obj, args);\r\n    };\r\n\r\n    client.nativeMethods.defineProperty(window.Object.prototype, master, {\r\n        get: () => {\r\n            return __uv;\r\n        },\r\n        enumerable: false,\r\n    });\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.setSource,\r\n        {\r\n            value: function (source) {\r\n                if (!client.nativeMethods.isExtensible(this)) return this;\r\n\r\n                client.nativeMethods.defineProperty(this, __uv.methods.source, {\r\n                    value: source,\r\n                    writable: true,\r\n                    enumerable: false,\r\n                });\r\n\r\n                return this;\r\n            },\r\n            enumerable: false,\r\n        }\r\n    );\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.source,\r\n        {\r\n            value: __uv,\r\n            writable: true,\r\n            enumerable: false,\r\n        }\r\n    );\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.location,\r\n        {\r\n            configurable: true,\r\n            get() {\r\n                return this === window.document || this === window\r\n                    ? __uv.location\r\n                    : this.location;\r\n            },\r\n            set(val) {\r\n                if (this === window.document || this === window) {\r\n                    __uv.location.href = val;\r\n                } else {\r\n                    this.location = val;\r\n                }\r\n            },\r\n        }\r\n    );\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.parent,\r\n        {\r\n            configurable: true,\r\n            get() {\r\n                const val = this.parent;\r\n\r\n                if (this === window) {\r\n                    try {\r\n                        return '__uv' in val ? val : this;\r\n                    } catch (e) {\r\n                        return this;\r\n                    }\r\n                }\r\n                return val;\r\n            },\r\n            set(val) {\r\n                this.parent = val;\r\n            },\r\n        }\r\n    );\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.top,\r\n        {\r\n            configurable: true,\r\n            get() {\r\n                const val = this.top;\r\n\r\n                if (this === window) {\r\n                    if (val === this.parent) return this[__uv.methods.parent];\r\n                    try {\r\n                        if (!('__uv' in val)) {\r\n                            let current = this;\r\n\r\n                            while (current.parent !== val) {\r\n                                current = current.parent;\r\n                            }\r\n\r\n                            return '__uv' in current ? current : this;\r\n                        } else {\r\n                            return val;\r\n                        }\r\n                    } catch (e) {\r\n                        return this;\r\n                    }\r\n                }\r\n                return val;\r\n            },\r\n            set(val) {\r\n                this.top = val;\r\n            },\r\n        }\r\n    );\r\n\r\n    client.nativeMethods.defineProperty(\r\n        window.Object.prototype,\r\n        __uv.methods.eval,\r\n        {\r\n            configurable: true,\r\n            get() {\r\n                return this === window ? __uv.eval : this.eval;\r\n            },\r\n            set(val) {\r\n                this.eval = val;\r\n            },\r\n        }\r\n    );\r\n}\r\n\n\n//# sourceURL=webpack://@titaniumnetwork-dev/ultraviolet/./src/uv.handler.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/uv.handler.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;