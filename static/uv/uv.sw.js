/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/uv.sw.js":
/*!**********************!*\
  !*** ./src/uv.sw.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*globals __uv$config*/\r\n// Users must import the config (and bundle) prior to importing uv.sw.js\r\n// This is to allow us to produce a generic bundle with no hard-coded paths.\r\n\r\n/**\r\n * @type {import('../uv').UltravioletCtor}\r\n */\r\nconst Ultraviolet = self.Ultraviolet;\r\n\r\nconst cspHeaders = [\r\n    'cross-origin-embedder-policy',\r\n    'cross-origin-opener-policy',\r\n    'cross-origin-resource-policy',\r\n    'content-security-policy',\r\n    'content-security-policy-report-only',\r\n    'expect-ct',\r\n    'feature-policy',\r\n    'origin-isolation',\r\n    'strict-transport-security',\r\n    'upgrade-insecure-requests',\r\n    'x-content-type-options',\r\n    'x-download-options',\r\n    'x-frame-options',\r\n    'x-permitted-cross-domain-policies',\r\n    'x-powered-by',\r\n    'x-xss-protection',\r\n];\r\nconst emptyMethods = ['GET', 'HEAD'];\r\n\r\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\r\n    constructor(config = __uv$config) {\r\n        super();\r\n        if (!config.bare) config.bare = '/bare/';\r\n        if (!config.prefix) config.prefix = '/service/';\r\n        this.config = config;\r\n        const addresses = (\r\n            Array.isArray(config.bare) ? config.bare : [config.bare]\r\n        ).map((str) => new URL(str, location).toString());\r\n        this.address = addresses[~~(Math.random() * addresses.length)];\r\n        /**\r\n         * @type {InstanceType<Ultraviolet['BareClient']>}\r\n         */\r\n        this.bareClient = new Ultraviolet.BareClient(this.address);\r\n    }\r\n    /**\r\n     *\r\n     * @param {Event & {request: Request}} param0\r\n     * @returns\r\n     */\r\n    async fetch({ request }) {\r\n        /**\r\n         * @type {string|void}\r\n         */\r\n        let fetchedURL;\r\n\r\n        try {\r\n            if (!request.url.startsWith(location.origin + this.config.prefix))\r\n                return await fetch(request);\r\n\r\n            const ultraviolet = new Ultraviolet(this.config, this.address);\r\n\r\n            if (typeof this.config.construct === 'function') {\r\n                this.config.construct(ultraviolet, 'service');\r\n            }\r\n\r\n            const db = await ultraviolet.cookie.db();\r\n\r\n            ultraviolet.meta.origin = location.origin;\r\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\r\n                ultraviolet.sourceUrl(request.url)\r\n            );\r\n\r\n            const requestCtx = new RequestContext(\r\n                request,\r\n                this,\r\n                ultraviolet,\r\n                !emptyMethods.includes(request.method.toUpperCase())\r\n                    ? await request.blob()\r\n                    : null\r\n            );\r\n\r\n            if (ultraviolet.meta.url.protocol === 'blob:') {\r\n                requestCtx.blob = true;\r\n                requestCtx.base = requestCtx.url = new URL(\r\n                    requestCtx.url.pathname\r\n                );\r\n            }\r\n\r\n            if (\r\n                request.referrer &&\r\n                request.referrer.startsWith(location.origin)\r\n            ) {\r\n                const referer = new URL(\r\n                    ultraviolet.sourceUrl(request.referrer)\r\n                );\r\n\r\n                if (\r\n                    requestCtx.headers.origin ||\r\n                    (ultraviolet.meta.url.origin !== referer.origin &&\r\n                        request.mode === 'cors')\r\n                ) {\r\n                    requestCtx.headers.origin = referer.origin;\r\n                }\r\n\r\n                requestCtx.headers.referer = referer.href;\r\n            }\r\n\r\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\r\n            const cookieStr = ultraviolet.cookie.serialize(\r\n                cookies,\r\n                ultraviolet.meta,\r\n                false\r\n            );\r\n\r\n            requestCtx.headers['user-agent'] = navigator.userAgent;\r\n\r\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\r\n\r\n            const reqEvent = new HookEvent(requestCtx, null, null);\r\n            this.emit('request', reqEvent);\r\n\r\n            if (reqEvent.intercepted) return reqEvent.returnValue;\r\n\r\n            fetchedURL = requestCtx.blob\r\n                ? 'blob:' + location.origin + requestCtx.url.pathname\r\n                : requestCtx.url;\r\n\r\n            const response = await this.bareClient.fetch(fetchedURL, {\r\n                headers: requestCtx.headers,\r\n                method: requestCtx.method,\r\n                body: requestCtx.body,\r\n                credentials: requestCtx.credentials,\r\n                mode:\r\n                    location.origin !== requestCtx.address.origin\r\n                        ? 'cors'\r\n                        : requestCtx.mode,\r\n                cache: requestCtx.cache,\r\n                redirect: requestCtx.redirect,\r\n            });\r\n\r\n            const responseCtx = new ResponseContext(requestCtx, response);\r\n            const resEvent = new HookEvent(responseCtx, null, null);\r\n\r\n            this.emit('beforemod', resEvent);\r\n            if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n            for (const name of cspHeaders) {\r\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\r\n            }\r\n\r\n            if (responseCtx.headers.location) {\r\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\r\n                    responseCtx.headers.location\r\n                );\r\n            }\r\n\r\n            // downloads\r\n            if (request.destination === 'document') {\r\n                const header = responseCtx.headers['content-disposition'];\r\n\r\n                // validate header and test for filename\r\n                if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\r\n                    // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\r\n                    // if it's invalid then we can still possibly test for the attachment/inline type\r\n                    const type = /^\\s*?attachment/i.test(header)\r\n                        ? 'attachment'\r\n                        : 'inline';\r\n\r\n                    // set the filename\r\n                    const [filename] = new URL(response.finalURL).pathname\r\n                        .split('/')\r\n                        .slice(-1);\r\n\r\n                    responseCtx.headers[\r\n                        'content-disposition'\r\n                    ] = `${type}; filename=${JSON.stringify(filename)}`;\r\n                }\r\n            }\r\n\r\n            if (responseCtx.headers['set-cookie']) {\r\n                Promise.resolve(\r\n                    ultraviolet.cookie.setCookies(\r\n                        responseCtx.headers['set-cookie'],\r\n                        db,\r\n                        ultraviolet.meta\r\n                    )\r\n                ).then(() => {\r\n                    self.clients.matchAll().then(function (clients) {\r\n                        clients.forEach(function (client) {\r\n                            client.postMessage({\r\n                                msg: 'updateCookies',\r\n                                url: ultraviolet.meta.url.href,\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n                delete responseCtx.headers['set-cookie'];\r\n            }\r\n\r\n            if (responseCtx.body) {\r\n                switch (request.destination) {\r\n                    case 'script':\r\n                    case 'worker':\r\n                        {\r\n                            // craft a JS-safe list of arguments\r\n                            const scripts = [\r\n                                ultraviolet.bundleScript,\r\n                                ultraviolet.clientScript,\r\n                                ultraviolet.configScript,\r\n                                ultraviolet.handlerScript,\r\n                            ]\r\n                                .map((script) => JSON.stringify(script))\r\n                                .join(',');\r\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\r\n                                this.address,\r\n                                this.bareClient.data,\r\n                                ultraviolet.cookie.serialize(\r\n                                    cookies,\r\n                                    ultraviolet.meta,\r\n                                    true\r\n                                ),\r\n                                request.referrer\r\n                            )} importScripts(${scripts}); }\\n`;\r\n                            responseCtx.body += ultraviolet.js.rewrite(\r\n                                await response.text()\r\n                            );\r\n                        }\r\n                        break;\r\n                    case 'style':\r\n                        responseCtx.body = ultraviolet.rewriteCSS(\r\n                            await response.text()\r\n                        );\r\n                        break;\r\n                    case 'iframe':\r\n                    case 'document':\r\n                        if (\r\n                            isHtml(\r\n                                ultraviolet.meta.url,\r\n                                responseCtx.headers['content-type'] || ''\r\n                            )\r\n                        ) {\r\n                            responseCtx.body = ultraviolet.rewriteHtml(\r\n                                await response.text(),\r\n                                {\r\n                                    document: true,\r\n                                    injectHead: ultraviolet.createHtmlInject(\r\n                                        ultraviolet.handlerScript,\r\n                                        ultraviolet.bundleScript,\r\n                                        ultraviolet.clientScript,\r\n                                        ultraviolet.configScript,\r\n                                        this.address,\r\n                                        this.bareClient.data,\r\n                                        ultraviolet.cookie.serialize(\r\n                                            cookies,\r\n                                            ultraviolet.meta,\r\n                                            true\r\n                                        ),\r\n                                        request.referrer\r\n                                    ),\r\n                                }\r\n                            );\r\n                        }\r\n                }\r\n            }\r\n\r\n            if (requestCtx.headers.accept === 'text/event-stream') {\r\n                responseCtx.headers['content-type'] = 'text/event-stream';\r\n            }\r\n            if (crossOriginIsolated) {\r\n                responseCtx.headers['Cross-Origin-Embedder-Policy'] = 'require-corp';\r\n            }\r\n\r\n            this.emit('response', resEvent);\r\n            if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n            return new Response(responseCtx.body, {\r\n                headers: responseCtx.headers,\r\n                status: responseCtx.status,\r\n                statusText: responseCtx.statusText,\r\n            });\r\n        } catch (err) {\r\n            if (!['document', 'iframe'].includes(request.destination))\r\n                return new Response(undefined, { status: 500 });\r\n\r\n            console.error(err);\r\n\r\n            return renderError(err, fetchedURL, this.address);\r\n        }\r\n    }\r\n    static Ultraviolet = Ultraviolet;\r\n}\r\n\r\nself.UVServiceWorker = UVServiceWorker;\r\n\r\nclass ResponseContext {\r\n    /**\r\n     *\r\n     * @param {RequestContext} request\r\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\r\n     */\r\n    constructor(request, response) {\r\n        this.request = request;\r\n        this.raw = response;\r\n        this.ultraviolet = request.ultraviolet;\r\n        this.headers = {};\r\n        // eg set-cookie\r\n        for (const key in response.rawHeaders)\r\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\r\n        this.status = response.status;\r\n        this.statusText = response.statusText;\r\n        this.body = response.body;\r\n    }\r\n    get url() {\r\n        return this.request.url;\r\n    }\r\n    get base() {\r\n        return this.request.base;\r\n    }\r\n    set base(val) {\r\n        this.request.base = val;\r\n    }\r\n}\r\n\r\nclass RequestContext {\r\n    /**\r\n     *\r\n     * @param {Request} request\r\n     * @param {UVServiceWorker} worker\r\n     * @param {Ultraviolet} ultraviolet\r\n     * @param {BodyInit} body\r\n     */\r\n    constructor(request, worker, ultraviolet, body = null) {\r\n        this.ultraviolet = ultraviolet;\r\n        this.request = request;\r\n        this.headers = Object.fromEntries(request.headers.entries());\r\n        this.method = request.method;\r\n        this.address = worker.address;\r\n        this.body = body || null;\r\n        this.cache = request.cache;\r\n        this.redirect = request.redirect;\r\n        this.credentials = 'omit';\r\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\r\n        this.blob = false;\r\n    }\r\n    get url() {\r\n        return this.ultraviolet.meta.url;\r\n    }\r\n    set url(val) {\r\n        this.ultraviolet.meta.url = val;\r\n    }\r\n    get base() {\r\n        return this.ultraviolet.meta.base;\r\n    }\r\n    set base(val) {\r\n        this.ultraviolet.meta.base = val;\r\n    }\r\n}\r\n\r\nfunction isHtml(url, contentType = '') {\r\n    return (\r\n        (\r\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\r\n            'text/html'\r\n        ).split(';')[0] === 'text/html'\r\n    );\r\n}\r\n\r\nclass HookEvent {\r\n    #intercepted;\r\n    #returnValue;\r\n    constructor(data = {}, target = null, that = null) {\r\n        this.#intercepted = false;\r\n        this.#returnValue = null;\r\n        this.data = data;\r\n        this.target = target;\r\n        this.that = that;\r\n    }\r\n    get intercepted() {\r\n        return this.#intercepted;\r\n    }\r\n    get returnValue() {\r\n        return this.#returnValue;\r\n    }\r\n    respondWith(input) {\r\n        this.#returnValue = input;\r\n        this.#intercepted = true;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n * @returns\r\n */\r\nfunction hostnameErrorTemplate(fetchedURL, bareServer) {\r\n    const parsedFetchedURL = new URL(fetchedURL);\r\n    const script =\r\n        `remoteHostname.textContent = ${JSON.stringify(\r\n            parsedFetchedURL.hostname\r\n        )};` +\r\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\r\n        `uvHostname.textContent = ${JSON.stringify(location.hostname)};` +\r\n        `reload.addEventListener(\"click\", () => location.reload());` +\r\n        `uvVersion.textContent = ${JSON.stringify(\r\n            \"1.0.11\"\r\n        )};`;\r\n\r\n    return (\r\n        '<!DOCTYPE html>' +\r\n        '<html>' +\r\n        '<head>' +\r\n        \"<meta charset='utf-8' />\" +\r\n        '<title>Error</title>' +\r\n        '</head>' +\r\n        '<body>' +\r\n        '<h1>This site can’t be reached</h1>' +\r\n        '<hr />' +\r\n        '<p><b id=\"remoteHostname\"></b>’s server IP address could not be found.</p>' +\r\n        '<p>Try:</p>' +\r\n        '<ul>' +\r\n        '<li>Verifying you entered the correct address</li>' +\r\n        '<li>Clearing the site data</li>' +\r\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\r\n        \"<li>Verifying the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\r\n        '</ul>' +\r\n        '<button id=\"reload\">Reload</button>' +\r\n        '<hr />' +\r\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\r\n        `<script src=\"${\r\n            'data:application/javascript,' + encodeURIComponent(script)\r\n        }\"></script>` +\r\n        '</body>' +\r\n        '</html>'\r\n    );\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} title\r\n * @param {string} code\r\n * @param {string} id\r\n * @param {string} message\r\n * @param {string} trace\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n * @returns\r\n */\r\nfunction errorTemplate(\r\n    title,\r\n    code,\r\n    id,\r\n    message,\r\n    trace,\r\n    fetchedURL,\r\n    bareServer\r\n) {\r\n    // produced by bare-server-node\r\n    if (message === 'The specified host could not be resolved.')\r\n        return hostnameErrorTemplate(fetchedURL, bareServer);\r\n\r\n    // turn script into a data URI so we don't have to escape any HTML values\r\n    const script =\r\n        `errorTitle.textContent = ${JSON.stringify(title)};` +\r\n        `errorCode.textContent = ${JSON.stringify(code)};` +\r\n        (id ? `errorId.textContent = ${JSON.stringify(id)};` : '') +\r\n        `errorMessage.textContent =  ${JSON.stringify(message)};` +\r\n        `errorTrace.value = ${JSON.stringify(trace)};` +\r\n        `fetchedURL.textContent = ${JSON.stringify(fetchedURL)};` +\r\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\r\n        `for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\r\n            location.hostname\r\n        )};` +\r\n        `reload.addEventListener(\"click\", () => location.reload());` +\r\n        `uvVersion.textContent = ${JSON.stringify(\r\n            \"1.0.11\"\r\n        )};`;\r\n\r\n    return (\r\n        '<!DOCTYPE html>' +\r\n        '<html>' +\r\n        '<head>' +\r\n        \"<meta charset='utf-8' />\" +\r\n        '<title>Error</title>' +\r\n        '</head>' +\r\n        '<body>' +\r\n        \"<h1 id='errorTitle'></h1>\" +\r\n        '<hr />' +\r\n        '<p>Failed to load <b id=\"fetchedURL\"></b></p>' +\r\n        '<p id=\"errorMessage\"></p>' +\r\n        '<table><tbody>' +\r\n        '<tr><td>Code:</td><td id=\"errorCode\"></td></tr>' +\r\n        (id ? '<tr><td>ID:</td><td id=\"errorId\"></td></tr>' : '') +\r\n        '</tbody></table>' +\r\n        '<textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>' +\r\n        '<p>Try:</p>' +\r\n        '<ul>' +\r\n        '<li>Checking your internet connection</li>' +\r\n        '<li>Verifying you entered the correct address</li>' +\r\n        '<li>Clearing the site data</li>' +\r\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\r\n        \"<li>Verify the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\r\n        '</ul>' +\r\n        '<p>If you\\'re the administrator of <b id=\"uvHostname\"></b>, try:</p>' +\r\n        '<ul>' +\r\n        '<li>Restarting your Bare server</li>' +\r\n        '<li>Updating Ultraviolet</li>' +\r\n        '<li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>' +\r\n        '</ul>' +\r\n        '<button id=\"reload\">Reload</button>' +\r\n        '<hr />' +\r\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\r\n        `<script src=\"${\r\n            'data:application/javascript,' + encodeURIComponent(script)\r\n        }\"></script>` +\r\n        '</body>' +\r\n        '</html>'\r\n    );\r\n}\r\n\r\n/**\r\n * @typedef {import(\"@tomphttp/bare-client\").BareError} BareError\r\n */\r\n\r\n/**\r\n *\r\n * @param {unknown} err\r\n * @returns {err is BareError}\r\n */\r\nfunction isBareError(err) {\r\n    return err instanceof Error && typeof err.body === 'object';\r\n}\r\n\r\n/**\r\n *\r\n * @param {unknown} err\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n */\r\nfunction renderError(err, fetchedURL, bareServer) {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let status;\r\n    /**\r\n     * @type {string}\r\n     */\r\n    let title;\r\n    /**\r\n     * @type {string}\r\n     */\r\n    let code;\r\n    let id = '';\r\n    /**\r\n     * @type {string}\r\n     */\r\n    let message;\r\n\r\n    if (isBareError(err)) {\r\n        status = err.status;\r\n        title = 'Error communicating with the Bare server';\r\n        message = err.body.message;\r\n        code = err.body.code;\r\n        id = err.body.id;\r\n    } else {\r\n        status = 500;\r\n        title = 'Error processing your request';\r\n        message = 'Internal Server Error';\r\n        code = err instanceof Error ? err.name : 'UNKNOWN';\r\n    }\r\n\r\n    return new Response(\r\n        errorTemplate(\r\n            title,\r\n            code,\r\n            id,\r\n            message,\r\n            String(err),\r\n            fetchedURL,\r\n            bareServer\r\n        ),\r\n        {\r\n            status,\r\n            headers: {\r\n                'content-type': 'text/html',\r\n            },\r\n        }\r\n    );\r\n}\r\n\n\n//# sourceURL=webpack://@titaniumnetwork-dev/ultraviolet/./src/uv.sw.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/uv.sw.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;